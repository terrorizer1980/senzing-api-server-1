package {{packageName}};

import java.util.*;
import {{packageName}}.support.OneOf;
import {{packageName}}.support.Wrapper;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
{{#each imports}}import {{.}};
{{/each}}
/**
 * {{description}}
 */
@JsonDeserialize(using = {{className}}.Deserializer.class)
public abstract class {{className}} extends OneOf {
  /**
   * The {@link Map} of value class keys to wrapper {@link Class} values.
   */
  private static final Map<Class, Class<? extends {{className}}>>
    WRAPPER_CLASS_MAP;

  static {
    Map<Class, Class<? extends {{className}}>> map = new LinkedHashMap<>();

{{#each componentTypes}}    map.put({{{.}}}.class, As{{{.}}}.class);
{{/each}}
    WRAPPER_CLASS_MAP = Collections.unmodifiableMap(map);
  }

  /**
   * Constructs with the actual class of the value held by this instance.
   * @param actual The actual class of the value held by this instance.
   */
  private {{className}}(Class<?> actual) {
    super(actual);
  }

  /**
   * Parses the specified text as one of the possible types and returns it in
   * a {@link {{className}}\} wrapper class.
   *
   * @param text The text to parse.
   * @return The parsed instance of {@link {{className}}\}.
   */
  public static {{className}} valueOf(String text) {
    return oneOfValueOf(
        text, {{className}}.class, WRAPPER_CLASS_MAP);
  }
{{#each componentTypes}}
  /**
   * Creates a new instance of this class whose value is the specified
   * {@link {{.}}\} instance.  This method returns <tt>null</tt> if the
   * specified value is <tt>null</tt>.
   *
   * @param value The value for this instance.
   * @return The new instance of {@link As{{.}}\} with the specified non-null
   *         value or <tt>null</tt> if the specified value is <tt>null</tt>.
   */
  public static {{className}}.As{{{.}}} from({{{.}}} value) {
    if (value == null) return null;
    As{{.}} wrapper = new As{{.}}();
    wrapper.set(value);
    return wrapper;
  }
{{/each}}

  /**
   * Provides a {@link OneOfDeserializer} implementation for the
   * {@link {{className}}\} class.
   */
  public static class Deserializer extends OneOfDeserializer<{{className}}>
  {
    public Deserializer() {
      super({{className}}.class);
    }

    public Collection<Class<? extends {{className}}>> getWrapperClasses() {
      return WRAPPER_CLASS_MAP.values();
    }
  }
{{#each componentTypes}}
  /**
   * Extends {@link {{className}}\} to represent the value as a
   * {@llink {{.}}\}.
   */
  @JsonDeserialize(using = As{{.}}.Deserializer.class)
  public static class As{{.}} extends {{className}}
      implements Wrapper<{{.}}>
  {
    /**
     * The underlying value.
     */
    private {{.}} value;

    /**
     * Default constructor.
     */
    public As{{.}}() {
      super({{.}}.class);
      this.value = null;
    }

    /**
     * Implemented to return the underlying value as an {@link Object} to
     * complete the {@link OneOf} implementation.
     *
     * @return The underlying value as an {@link Object}.
     */
    public final Object getValue() {
      return this.get();
    }

    /**
     * Implemented to set the underlying value as an {@link Object} to
     * complete the {@link OneOf} implementation.
     *
     * @param value The underlying value as an {@link Object}.
     *
     * @throws ClassCastException If the specified value is not an instance of
     *                            {@link {{.}}\}.
     */
    public final void setValue(Object value) throws ClassCastException {
      this.set(({{.}}) value);
    }

    /**
     * Gets the underlying value.
     * @return The underlying value.
     */
    public {{.}} get() { return this.value; }

    /**
     * Sets the underlying value.
     * @param value The underlying value.
     */
    public void set({{.}} value) {
      this.value = value;
    }

    /**
     * Deserializer to parse an <tt>As{{.}}</tt> as simply a <tt>{{.}}</tt>
     * object with no additional decoration.
     */
    public static class Deserializer
        extends WrapperDeserializer<{{.}}, As{{.}}>
    {
      public Deserializer() {
        super(As{{.}}.class, {{.}}.class);
      }
    }

    /**
     * Creates a new {@link {{className}}.As{{.}}\} instance by parsing the
     * specified text.
     * @param text The text to parse as an instance of this class.
     * @return A new instance of this class parsed from the specified text.
     */
    public static As{{.}} valueOf(String text) {
      return OneOf.wrapperValueOf(text, As{{.}}.class, {{.}}.class);
    }
  }
{{/each}}
}
