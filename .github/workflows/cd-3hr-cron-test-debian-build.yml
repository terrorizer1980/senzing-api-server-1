name: Cron Schedule 3 hr Test Java API Server Build on Debian

on:
  push:
    branches:
      - test.chia


jobs:
  cronBuildSenzingJavaApiServer:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v1
      - name: Capture environment variables
        run: printenv
      - name: Download Senzing Deb Package Onto Runner
        id: download_senzing_deb
        env:
          SENZING_REPO_URL: https://senzing-staging-apt.s3.amazonaws.com/senzingstagingrepo_1.0.0-1_amd64.deb
        run: |
          wget ${SENZING_REPO_URL}
          sudo apt-get -y install ./${SENZING_REPO_URL##*/}
          rm -rf senzingrepo_1.0.0-1_amd64.deb
          sudo apt-get update -y
          sudo chown _apt /home/runner/work/senzing-api-server/senzing-api-server/
          sudo apt-get download -o=dir::cache=${HOME} senzingapi senzingdata-v1
          sudo chown runner /home/runner/work/senzing-api-server/senzing-api-server/
      - name: Install Senzing Data Without Sqlite Dependency
        id: install_senzing_data
        run: sudo SENZING_ACCEPT_EULA=${{ secrets.SENZING_ACCEPT_EULA }} dpkg -i --ignore-depends=sqlite3,sqlite *senzingdata*deb
      - name: Install Senzing Api Without Sqlite Dependency
        id: install_senzing_api
        run: sudo SENZING_ACCEPT_EULA=${{ secrets.SENZING_ACCEPT_EULA }} dpkg -i --ignore-depends=sqlite3,sqlite *senzingapi*deb
      - name: Get Build Informaiton
        if: always()
        id: build_info
        run: |
          g2_verion=$(apt list senzingapi | grep installed | grep -Po "\d{1,}\.\d{1,}\.\d{1,}-\d{1,}")
          echo '{"g2_version":"'${g2_version}'"}' >> build_info.json 2>&1
      - name: Copy /opt/senzing to Runner working directory
        id: copy_senzing_wrk_dir
        run: |
          sudo mkdir -p ${HOME}/work/senzing-api-server/senzing-api-server/g2/lib
          sudo mv /opt/senzing/g2/lib/g2.jar ${HOME}/work/senzing-api-server/senzing-api-server/g2/lib/g2.jar
      - name: Build Java API Server
        id: build_java_api_server
        run: |
          make \
            BASE_BUILDER_IMAGE="senzing/base-image-debian:1.0.3" \
            BASE_IMAGE="senzing/senzing-base:1.4.0" \
            SENZING_G2_JAR_PATHNAME=${HOME}/work/senzing-api-server/senzing-api-server/g2/lib/g2.jar \
            SENZING_G2_JAR_VERSION=$(cat /opt/senzing/g2/g2BuildVersion.json | jq --raw-output '.VERSION') \
            docker-build
      - name: Persisting Variables
        id: persisting_log
        if: always()
        uses: actions/upload-artifact@v1
        with:
          name: build_info
          path: build_info.json
  logCronBuildSenzingJavaApiServer:
    needs: cronBuildSenzingJavaApiServer
    if: always()
    runs-on: ubuntu-latest
    steps:
      - name: Get Build Job Info From FIle
        uses: actions/download-artifact@v1
        with:
          name: build_info
      - name: Set Variables With Build Info
        id: job_info
        run: |
          curl -v -L -u runner:${{ secrets.GITHUB_TOKEN }} -o job_info.json https://api.github.com/repos/${GITHUB_REPOSITORY}/actions/runs/${{ github.run_id }}/jobs
          echo ::set-output name=status::$(cat job_info.json | jq --raw-output '.jobs | .[0] | .conclusion')
          echo ::set-output name=log_url::$(cat job_info.json | jq --raw-output '.jobs | .[0] | .url')
          echo ::set-output name=g2_version::$(cat build_info/build_info.json | jq --raw-output '.g2_version')
          echo ::set-output name=branch_name::$(echo ${GITHUB_REF##*/})
      - name: Generate log file
        run: |
          curl -v -L -u runner:${{ secrets.GITHUB_TOKEN }} -o build_logs.txt ${{ steps.job_info.outputs.log_url }}/logs
      - name: Persisting log
        id: persisting_log
        if: always()
        uses: actions/upload-artifact@v1
        with:
          name: workflow_log
          path: build_logs.txt
